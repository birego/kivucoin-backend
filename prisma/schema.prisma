generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  TRANSFER
  WITHDRAW
  DEPOSIT
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  password             String
  role                 Role                  @default(USER)
  wallet               Wallet?
  loginHistory         LoginHistory[]
  notifications        Notification[]
  passwordResetTokens  PasswordResetToken[]
  emissions            Emission[]            @relation("adminEmissions")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Wallet {
  id          String        @id @default(uuid())
  userId      String        @unique
  user        User          @relation(fields: [userId], references: [id])
  balance     Float         @default(0)
  outgoing    Transaction[] @relation("fromWallet")
  incoming    Transaction[] @relation("toWallet")
  emissions   Emission[]    @relation("walletEmissions")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Transaction {
  id            String            @id @default(uuid())
  fromWalletId  String?
  fromWallet    Wallet?           @relation("fromWallet", fields: [fromWalletId], references: [id])
  toWalletId    String
  toWallet      Wallet            @relation("toWallet", fields: [toWalletId], references: [id])
  amount        Float
  fee           Float?
  type          TransactionType
  reason        String?
  createdAt     DateTime          @default(now())

  @@index([fromWalletId])
  @@index([toWalletId])
  @@index([createdAt])
}

model Emission {
  id          String   @id @default(uuid())
  toWalletId  String
  toWallet    Wallet   @relation("walletEmissions", fields: [toWalletId], references: [id])
  amount      Float
  reason      String
  adminId     String
  admin       User     @relation("adminEmissions", fields: [adminId], references: [id])
  createdAt   DateTime @default(now())
}

model LoginHistory {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  ipAddress  String
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  message    String
  type       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model PasswordResetToken {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  token      String   @unique
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([token])
}
